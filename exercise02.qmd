---
title: "Getting started with R and Python"
date: 2025-09-22
author: "Alexandre Tinouert"
format: html
embed-resources: true
---

## Getting started

### Name concepts of a programming language

> Write answer here 

### Check operator precedence

 - Calculate `2 + 6 * 5 ^ 2`
 
```{r}
# Write answer here
2 + 6 * 5 ^ 2
# = (5Â²) * 6 + 2
```


 - Which operator has the higher priority?
 - The square operator comes first

::: unilur-solution
Exponentiation

::: 

 - Change the order of execution giving priority to `+`


```{r}
# Write answer here
(2 + 6) * 5 ^ 2
# = 25 * 8 = 200
```
 

### How to exchange two variables?

There are three ways (in Python) to exchange the values of the names!

```{python}
a = 5
b = 10
```

```{python}
# Write answer here
a,b = b,a

# c = a
# a = b
# b = c

# a = a + b
# b = a - b
# a = a - b

print(a, b)

```

### What is the output of the following code?

```{python}
x = 7
1 < x < 10 < x + 3 <= 13
```

Explain in your words!

- If x = 7, then 1 < 7 is true, 7 < 10 is true, but 10 < 10 is false.

::: unilur-solution
Python parses four expressions, 1 < x and x < 10 and 10 < x + 3 and x + 3 <= 13 [X] True or [ ] False 
:::


### Missing values

A group of people in the street were asked about their age and answered `18, 20, 34, 53, 12, NA, NA, 72, 75, 13`.


::: {.callout-tip}
### Tip
You can use the function `replace()` to substitute `NA` with `0`.

Consider `is.na()` to identify indeces of missing positions.
:::

 * Compute the average age. 
 
 * Replace NAs with 0. 
 
 * How large is error that you make when ignore missing values?

```{r}
# Write answer here
sample_array = c(18, 20, 34, 53, 12, NA, NA, 72, 75, 13)


# 1) WE REPLACE NA WITH 0

new_array = replace(x <- sample_array, is.na(x), 0)

sum_array = sum(new_array)

sum_array # 297

len_array = length(new_array)

len_array # 10

avg1 = sum_array / len_array

avg1 # 29.7


# 2) WE REMOVE NA or 0 VALUES

filtered_array = new_array[new_array != 0]

filtered_array

filtered_sum = sum(filtered_array)
filtered_sum # 297

filtered_len = length(filtered_array)
filtered_len # 8

avg2 = filtered_sum / filtered_len
avg2 # 37.125

# The error when not taking the NA or 0 values into account is:
error = avg2 - avg1
error # 7.425

```

### Create a data frame

Create a data frame containing the following information:
  name |age |weight |  eye| group
Paul  | 16  | 57.0 |green  |   1
 Mary  |16   |50.0  |blue   |  1
 Sara  |16   |52.6 |black   |  2
 John  |17   |65.3 | blue    | 2

```{r}
# Write answer here
classroom <- data.frame(
  name = c("Paul", "Mary", "Sara", "John"),
  age = c(16, 16, 16, 17),
  eye = c("green", "blue", "black", "blue"),
  group = c(1, 1, 2, 2)
)
classroom
```

Assign the data frame to a variable named `classroom`.

Describe the type of variables in `classroom`.

- We have different columns as vectors (example: "name" is a vector column) where we can find either integers or strings.

Which data structure would you use in base Python?

- If no pandas: either nested arrays or dictionaries, otherwise data frames as well.

```{python}
# Write answer here

classroom = [{"name": "Paul", "age": 16, "eye": "green", "group": 1}, {"name": "Mary", "age": 16, "eye": "blue", "group": 1}, {"name": "Sara", "age": 16, "eye": "black", "group": 2}, {"name": "John", "age": 17, "eye": "blue", "group": 2}]

classroom # prefer not to use name as key, since at some point there may be multiple "Paul" in a class
```



## `mtcars`

You will work with the built-in `mtcars` dataset (R) and a Python equivalent derived from it. The goal is to compare the capabilities of R and Python, highlighting their strengths and differences in data processing.


### Setup

- For R, use the `mtcars` dataset (built-in).
- For Python, use a dictionary-based equivalent of `mtcars`.
- Only use **base R** and **base Python**.

### Notes

- Focus on **readability** and **reproducibility** in your code.
- Provide brief comments explaining your code and comparisons between R and Python.
- Use `#` for comments in both languages to explain your reasoning.
- Highlight differences in syntax, ease of use, and language strengths in your comparisons.

## Python `mtcars` equivalent

Run this R code to represent `mtcars` data frame:
```{r}
head(mtcars, 10)
```

Run this Python code to create a dictionary mimicking `mtcars`:

```{python}
mtcars = {
    'mpg':  [21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,
             16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 30.4, 33.9, 21.5, 15.5,
             15.2, 13.3, 19.2, 27.3, 26.0, 30.4, 15.8, 19.7, 15.0, 21.4],
    'cyl':  [6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6,
             8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,
             8, 8, 8, 4, 4, 4, 8, 6, 8, 4],
    'disp': [160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6,
             275.8, 275.8, 275.8, 472.0, 460.0, 440.0, 78.7, 75.7, 71.1, 120.1, 318.0,
             304.0, 350.0, 400.0, 79.0, 120.3, 95.1, 351.0, 145.0, 301.0, 121.0],
    'hp':   [110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123,
             180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
             150, 245, 175, 66, 91, 113, 264, 175, 335, 109],
    'drat': [3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
             3.07, 3.07, 3.07, 2.93, 3.00, 3.23, 4.08, 4.93, 4.22, 3.70, 2.76,
             3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11],
    'wt':   [2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440,
             4.070, 3.730, 3.780, 5.250, 5.424, 5.345, 2.200, 1.615, 1.835, 2.465, 3.520,
             3.435, 3.840, 3.845, 1.935, 2.140, 1.513, 3.170, 2.770, 3.570, 2.780],
    'qsec': [16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90,
             17.40, 17.60, 18.00, 17.98, 17.82, 17.42, 19.47, 18.52, 19.90, 20.01, 16.87,
             17.30, 15.41, 17.05, 18.90, 16.70, 16.90, 14.50, 15.50, 14.60, 18.60],
    'vs':   [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
             0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
    'am':   [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
             0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
    'gear': [4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4,
             3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,
             3, 3, 3, 4, 5, 5, 5, 5, 5, 4],
    'carb': [4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4,
             3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,
             2, 4, 2, 1, 2, 2, 4, 6, 8, 2],
    'name': ['Mazda RX4', 'Mazda RX4 Wag', 'Datsun 710', 'Hornet 4 Drive', 'Hornet Sportabout',
             'Valiant', 'Duster 360', 'Merc 240D', 'Merc 230', 'Merc 280', 'Merc 280C',
             'Merc 450SE', 'Merc 450SL', 'Merc 450SLC', 'Cadillac Fleetwood', 'Lincoln Continental',
             'Chrysler Imperial', 'Fiat 128', 'Honda Civic', 'Toyota Corolla', 'Toyota Corona',
             'Dodge Challenger', 'AMC Javelin', 'Camaro Z28', 'Pontiac Firebird', 'Fiat X1-9',
             'Porsche 914-2', 'Lotus Europa', 'Ford Pantera L', 'Ferrari Dino', 'Maserati Bora',
             'Volvo 142E']
}
```


## Tasks

### Task 1: Basic operations

Using `mtcars` (R) and the provided dictionary (Python):

#### **Arithmetic operations**:

- In R, calculate the average `mpg` for cars with `cyl == 6` using **vectorized** operations.
   
```{r}
# Write answer here
# filtered_mt <- subset(mtcars, cyl == 6, select = c(mpg))
# filtered_mt # only mpg where cyl = 6

# mean_mpg = mean(with(filtered_mt, mpg))
# mean_mpg # 19.74286

filtered_mt <- mtcars['mpg'][mtcars['cyl'] == 6]
filtered_mt

mean_mpg = mean(filtered_mt)
mean_mpg # 19.74286
```

- In base Python, calculate the same quantity.

```{python}
# Write answer here
filtered_mt = [mtcars["mpg"][i] if mtcars["cyl"][i] == 6 else None for i in range(len(mtcars["mpg"]))]

while None in filtered_mt:
  filtered_mt.remove(None)

filtered_mt

f_mean = sum(filtered_mt) / len(filtered_mt)
f_mean # 19.74285714285714

```



#### **Comparison and logical operations**:
- In R, count the number of cars where `mpg > 20` and `hp <= 100` using vectorized logical operations.

```{r}
# Write answer here
# n_filtered_mt <- mtcars[mtcars['mpg'] > 20 & mtcars['hp'] <= 100]
# n_filtered_mt # only mpg > 20 and hp <= 100

# n_len = dim(n_filtered_mt)
# n_len # 9 x 11, 9 lines

n_filtered_mt <- mtcars['mpg'][mtcars['mpg'] > 6 & mtcars['hp'] <= 100]
n_filtered_mt

n_len = length(n_filtered_mt)
n_len # 9 x 11, 9 lines

```

- In Python, perform the same operation.

```{python}
# Write answer here
n_filtered_mt = [mtcars["name"][i] if (mtcars["mpg"][i] > 20 and mtcars["hp"][i] <= 100) else None for i in range(len(mtcars["mpg"]))]

while None in n_filtered_mt:
  n_filtered_mt.remove(None)

n_filtered_mt

len_nfmt = len(n_filtered_mt)
len_nfmt # 9
```



### Task 2: Data types and structures

#### **Type checking and coercion**:
- In R, check the type of `mtcars$mpg` and coerce it to integer.

```{r}
# Write answer here
typeof(mtcars$mpg) # double

int_mpg = as.integer(mtcars$mpg)
int_mpg
```

- In Python, check the type of `mtcars['mpg']` and coerce it to a list of integers.

 
```{python}
# Write answer here
type(mtcars['mpg']) # list
type(mtcars['mpg'][0]) # float

int_mpg = [int(elt) for elt in mtcars['mpg']]
int_mpg # list of ints

```


#### **Subsetting/slicing**:
- In R, subset `mtcars` to select rows where `gear == 4` and columns `mpg`, and `hp`.

```{r}
# Write answer here
sub_filtered_mt <- subset(mtcars, gear == 4, select = c(mpg, hp))
sub_filtered_mt # only mpg and hp where gear = 4

len_sub = dim(sub_filtered_mt)
len_sub # 12 x 2: 12 lines
```

- In Python, perform the same operation using explicit iteration.

```{python}
# Write answer here
sub_filtered_mt = [(mtcars["mpg"][i], mtcars["hp"][i]) if mtcars["gear"][i] == 4 else None for i in range(len(mtcars["mpg"]))]

while None in sub_filtered_mt:
  sub_filtered_mt.remove(None)

len(sub_filtered_mt) # 12

```



### Task 3: Packages and libraries

#### **Loading packages/libraries**:
- In R, load the `tidyverse` package and use `dplyr::filter()` to select cars with `am == 1` (manual transmission).

```{r}
# Write answer here
library(tidyverse)
dplyr::filter(mtcars, am==1)

final_len = dim(dplyr::filter(mtcars, am==1))
final_len # 13 x 11: 13 cars
```

- In Python, import the `statistics` module and calculate the mean `mpg` for cars with `am == 1`.
```{python}
# Write answer here
import statistics

final_filtered_mt = [mtcars["mpg"][i] if mtcars["am"][i] == 1 else None for i in range(len(mtcars["mpg"]))]

while None in final_filtered_mt:
  final_filtered_mt.remove(None)

statistics.mean(final_filtered_mt) # 24.392307692307693

```



